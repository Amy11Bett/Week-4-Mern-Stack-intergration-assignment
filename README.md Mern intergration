# 📰 MERN Stack Blog Application

## 📌 Overview

This is a full-stack **MERN (MongoDB, Express.js, React.js, Node.js)** application designed as a blog platform. It supports full CRUD operations, user authentication, image uploads, and commenting features.

---

## 📁 Project Structure

mern-blog/
├── client/ # React front-end
│ ├── public/ # Static files
│ ├── src/ # React source code
│ │ ├── components/ # Reusable UI components (Navbar, PostCard, etc.)
│ │ ├── pages/ # Home, Login, Register, PostDetail, NewPost, etc.
│ │ ├── hooks/ # Custom React hooks (e.g., useAuth, useFetch)
│ │ ├── services/ # API service files (axios calls)
│ │ ├── context/ # AuthContext and other providers
│ │ └── App.jsx # Main application component
│ └── package.json # Front-end dependencies
├── server/ # Express.js back-end
│ ├── config/ # MongoDB connection & environment config
│ ├── controllers/ # Logic for each route (posts, users, auth)
│ ├── models/ # Mongoose schemas (User, Post, Comment)
│ ├── routes/ # Express routes (authRoutes, postRoutes)
│ ├── middleware/ # Auth, error handling, file upload middleware
│ ├── utils/ # Utility functions (e.g., token generation)
│ ├── server.js # Entry point for Express server
│ └── package.json # Back-end dependencies
└── README.md # Project documentation


---

## 🚀 Features

### ✅ Core Functionality
- User registration and login
- JWT-based authentication
- Create, Read, Update, Delete blog posts
- Commenting system on posts
- Image upload support (via Multer)
- Responsive front-end using React
- Protected routes (based on auth state)

### 🔧 Technologies Used
- **Frontend**: React, Axios, React Router, Tailwind CSS (optional)
- **Backend**: Node.js, Express.js, MongoDB, Mongoose, Multer
- **Authentication**: JWT (JSON Web Tokens)
- **Database**: MongoDB (Local or Atlas)

---

## 🛠️ Getting Started

### 📦 Prerequisites
- Node.js v18+
- MongoDB (local or MongoDB Atlas)
- Git

---

### 🔨 Installation

#### 1. Clone the repository
```bash
git clone https://github.com/YOUR-USERNAME/mern-blog.git
cd mern-blog
cd server
npm install
**PORT=5000
MONGO_URI=your_mongodb_connection_string
JWT_SECRET=your_jwt_secret_key
npm run dev
cd ../client
npm install
npm run dev
🔐 Authentication
Registration and login handled via /api/auth/register and /api/auth/login

JWT tokens stored in localStorage

Protected routes check auth status via React context

🌐 API Endpoints Overview
Method	Route	Description
POST	/api/auth/register	Register a new user
POST	/api/auth/login	Log in an existing user
GET	/api/posts	Get all blog posts
GET	/api/posts/:id	Get a single post
POST	/api/posts	Create a post (auth required)
PUT	/api/posts/:id	Edit a post (auth + owner)
DELETE	/api/posts/:id	Delete a post (auth + owner)
POST	/api/posts/:id/comments	Add a comment to a post

📸 Screenshots
🏠 Home Page

✍️ New Post

🔐 Authentication

🧪 Testing
You can test all API endpoints using:

Postman

Thunder Client (VS Code extension)

Or the integrated front-end UI

🌍 Deployment
You can deploy this app using:

Frontend: Vercel or Netlify

Backend: Render, Railway, or Heroku

Make sure to update:

CORS settings in server.js

.env variables for production

📎 Resources
React Documentation

MongoDB Docs

Express Docs

Mongoose Docs

Node.js Docs

✅ Submission Checklist
 Frontend and backend implemented

 All API endpoints working

 Authentication and authorization complete

 Images and comments functional

 Code pushed to GitHub

 Screenshots included

 Deployment link added (optional)

 README completed

👨‍💻 Author
Your Name
GitHub: @yourusername

💡 This MERN blog project demonstrates full-stack proficiency and prepares you for building scalable, real-world applications.










**
